import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import "../style/Profile.css";
import { toast } from "react-toastify";
export default function ProfilePage() {
  const navigate = useNavigate();
  const [preview, setPreview] = useState(null);
  const [user, setUser] = useState({
    username: "",
    email: "",
    registered: "",
    avatar: "",
  });
  const [myGoals, setMyGoals] = useState([]);

  useEffect(() => {
    const fetchGoals = async () => {
      try {
        const token = localStorage.getItem("token");
        console.log(token);

        const res = await fetch("https://qosyl-project-backend.onrender.com/api/invite/my", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!res.ok) throw new Error("–ú–∞“õ—Å–∞—Ç—Ç–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ");

        const data = await res.json();
        console.log(data);
        console.log(token);

        setMyGoals(data);
      } catch (err) {
        console.error("GOAL FETCH ERROR:", err);
      }
    };

    fetchGoals();
  }, []);

  useEffect(() => {
    const userData = localStorage.getItem("user");
    if (userData) {
      try {
        const parsed = JSON.parse(userData);
        setUser({
          username: parsed.username || "",
          email: parsed.email || "",
          registered: parsed.registered || "",
          avatar: parsed.avatar || "",
        });
      } catch {
        setUser({ username: "", email: "", registered: "", avatar: "" });
      }
    }
  }, []);

  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const imageUrl = URL.createObjectURL(file);
      setPreview(imageUrl);
    }
  };

  const handleAvatarUpload = async (e) => {
    e.preventDefault();
    const fileInput = document.getElementById("avatar-upload");
    const file = fileInput.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append("avatar", file);
    const token = localStorage.getItem("token");

    if (!token) {
      toast.error("–°–µ—Å—Å–∏—è –∞—è“õ—Ç–∞–ª–¥—ã. “ö–∞–π—Ç–∞ –∫—ñ—Ä—ñ“£—ñ–∑.");
      navigate("/login");
      return;
    }

    try {
      const response = await fetch("https://qosyl-project-backend.onrender.com/api/profile/avatar", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      const contentType = response.headers.get("content-type");
      if (!response.ok) {
        if (response.status === 404) {
          throw new Error(
            "–°–µ—Ä–≤–µ—Ä–¥–µ /api/profile/avatar –º–∞—Ä—à—Ä—É—Ç—ã —Ç–∞–±—ã–ª–º–∞–¥—ã (404). –°–µ—Ä–≤–µ—Ä –∫–æ–¥—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑."
          );
        }
        if (response.status === 403) {
          toast.error("–†“±“õ—Å–∞—Ç –∂–æ“õ –Ω–µ–º–µ—Å–µ —Ç–æ–∫–µ–Ω –∂–∞—Ä–∞–º—Å—ã–∑. “ö–∞–π—Ç–∞ –∫—ñ—Ä—ñ“£—ñ–∑.");
          localStorage.removeItem("token");
          localStorage.removeItem("user");
          navigate("/login");
          return;
        }
        throw new Error(`–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ: ${response.status}`);
      }
      if (!contentType || !contentType.includes("application/json")) {
        throw new Error("–°–µ—Ä–≤–µ—Ä–¥–µ–Ω –¥“±—Ä—ã—Å JSON –∫–µ–ª–º–µ–¥—ñ. –ú–∞—Ä—à—Ä—É—Ç –±–∞—Ä –º–∞?");
      }

      const result = await response.json();
      if (result.message === "Avatar added successfully") {
        const updatedUser = { ...user, avatar: result.avatar };
        setUser(updatedUser);
        localStorage.setItem("user", JSON.stringify(updatedUser));
        toast.success("–ê–≤–∞—Ç–∞—Ä “õ–æ—Å—ã–ª–¥—ã!");
      } else {
        alert(result.message || "–ë–µ–ª–≥—ñ—Å—ñ–∑ –∂–∞—É–∞–ø");
      }
    } catch (error) {
      console.error("Error:", error);
      toast.error("“ö–∞—Ç–µ –∫–µ—Ç—Ç—ñ, “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑");
    }
  };

  const [firstName, lastName] = user.username.split(" ");

  return (
    <div className="profile-wrapper">
      <div className="profile-container">
        <div className="avatar-section">
          <label htmlFor="avatar-upload" className="avatar-label">
            <img
              src={preview || user.avatar || "/default-avatar.png"}
              alt="avatar"
              className="avatar-preview"
            />
          </label>
          <input
            type="file"
            id="avatar-upload"
            accept="image/*"
            onChange={handleAvatarChange}
            className="hidden"
          />
          <button onClick={handleAvatarUpload} className="avatar-upload-button">
            –ê–≤–∞—Ç–∞—Ä–¥—ã —Å–∞“õ—Ç–∞—É
          </button>
          <h2 className="user-name">{user.username || "–ê—Ç—ã –∂–æ“õ “õ–æ–ª–¥–∞–Ω—É—à—ã"}</h2>
          <p className="user-email">{user.email || "email –∂–æ“õ"}</p>
        </div>

        <div className="info-section">
          <div>
            <h3 className="section-title">üë§ –ü—Ä–æ—Ñ–∏–ª—å</h3>
            <div className="info-text">
              <p>
                <strong>–ê—Ç—ã:</strong> {firstName || ""}
              </p>
              <p>
                <strong>–≠–ª–µ–∫—Ç—Ä–æ–Ω –ø–æ—à—Ç–∞:</strong> {user.email || ""}
              </p>
              <p>
                <strong>–ê–≤–∞—Ç–∞—Ä:</strong>{" "}
                {user.avatar ? "“ö–æ—Å—ã–ª“ì–∞–Ω" : "“ö–æ—Å—ã–ª–º–∞“ì–∞–Ω"}
              </p>
              <p>
                <strong>–¢—ñ—Ä–∫–µ–ª–≥–µ–Ω:</strong> {user.registered || "-"}
              </p>
            </div>
            {myGoals.length > 0 && (
              <div className="my-goals-section">
                <h3 className="section-title">üéØ –ú–µ–Ω—ñ“£ –º–∞“õ—Å–∞—Ç—Ç–∞—Ä—ã–º</h3>
                <ul className="goal-list">
                  {myGoals.map((goal) => (
                    <li key={goal.id} className="goal-item">
                      <strong>{goal.goal_name}</strong> ({goal.duration_days}{" "}
                      –∫“Ø–Ω)
                      <button
                        className="goal-access-button"
                        onClick={() => navigate(`/goal/${goal.id}`)}
                      >
                        –ö—ñ—Ä—É
                      </button>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>

          <div className="button-group">
            <button
              className="button logout-button"
              onClick={() => {
                localStorage.removeItem("token");
                localStorage.removeItem("user");
                navigate("/login");
              }}
            >
              üîì –®—ã“ì—É
            </button>
            <button className="button" onClick={() => navigate("/home")}>
              ‚û§ –ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
